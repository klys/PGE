<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMovilIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEleAnimado</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variables propias
moves = ds_map_create();
m = 0 // usado para el probador
m_counter = 1;
/*
    n - cantidad
    m-#
     x, y
*/
tiempo = 30; // tiempo en FPS (30 == 1 seg)
tipo = "repetir"
n = EleMovil_n_crear();
rapidez = 1 // velocidad del movimiento 
comportamiento = "estatico" // volteador, direccional, estatico
startx = x;
starty = y;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// menu vertical (click derecho)

ds_list_add(txt, "Mover")
ds_list_add(scr, EleMovil_CrearMove)

ds_list_add(txt, "Tipo")
ds_list_add(scr, EleMovil_CambiarTipo)

ds_list_add(txt, "Tiempo")
ds_list_add(scr, EleMovil_CambiarTiempo)

ds_list_add(txt, "Rapidez")
ds_list_add(scr, EleMovil_CambiarRapidez)

ds_list_add(txt, "Comportamiento")
ds_list_add(scr, EleMovil_CambiarComportamiento)

//ds_list_add(txt, "Origen")
//ds_list_add(scr, Elemento_SpriteOrigenSeleccion)

ds_list_add(txt, "Probar")
ds_list_add(scr, EleMovil_ProbarMov)

//ds_list_add(txt, "Efecto")
//ds_list_add(scr, Elemento_AgregarEfecto)

//ds_list_add(txt, "Efectuar")
//ds_list_add(scr, Elemento_ProbarEfecto)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mecanismo de movimiento (step aux)

mover = false;
mover_x = 0;
mover_y = 0;
mover_speed = 0;
mover_time = 0;
mover_angle = false;
mover_xscala = false;
mover_final = ""
mover_direction = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _obj = id;
with(objMovimientoLineal) {
    if(owner == _obj) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// m
m += m_counter;

if (DEBUG) {
    show_debug_message("m: "+string(m)+" moves-&gt;n: "+string(moves[? "n"]))
}

if (m &gt; moves[? "n"] and m_counter == 1) or (m_counter == -1 and m &lt; 1) {
    switch (mover_final) {
        case "repetir":
            visible = false;
            x = startx;
            y = starty;
            m = 0;
            alarm[1] = mover_time;
        break;
        
        case "circuito":
        /*
            if (EleMovil_cuantosMovilPropios(id) != 1) {
                var mov = moves[? "m-"+string(1)];
                mover_x = mov[? "x"];
                mover_y = mov[? "y"];    
                //m = 0;
                mover = true;
            } else { // un solo punto
            */
                mover_x = startx;
                mover_y = starty;
                mover = true;
                m = 0;
            //}
            //alarm[1] = mover_time;
        break;
        
        case "devolver":
            if (EleMovil_cuantosMovilPropios(id) == 1) {
                mover_x = startx;
                mover_y = starty;
                mover = true;
                m = 0;
                exit;
            }
            
            
            
            if (m_counter == 1) {
                m_counter = -1;
                alarm[1] = mover_time
            } else {
                m_counter = 1;
                mover_x = startx
                mover_y = starty
                mover = true;
                m = 0;
                //alarm[1] = mover_time
            }
            
        break;
        
        case "onasolavez":
        break;
    }
    //m = 0;
    //alarm[1] = mover_time;
    exit;
}

if (m &lt;= moves[? "n"] and m_counter == 1) or (m &gt; 0 and m_counter == -1) {
    visible = true;
    var mov = moves[? "m-"+string(m)];
    mover_x = mov[? "x"];
    mover_y = mov[? "y"];
    mover_speed = moves[? "speed"];
    mover_time = moves[? "time"];
    switch (moves[? "behaviur"]) {
        case "direccional":
            mover_angle = true;
        break;
        case "volteador":
            mover_xscala = true;
            //sprite_set_offset(image,sprite_get_width(image)/2,sprite_get_height(image)/2)
        break;
    }
    
    mover_final = moves[? "tipo"];
    mover = true;
    
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mecanismo de movimiento

if (mover == true) {
    var distance = point_distance(x,y,mover_x, mover_y);
    mover_direction = point_direction(x,y,mover_x,mover_y);
    move_towards_point(mover_x, mover_y, mover_speed);
    if (mover_angle == true) and (distance &gt; mover_speed) { // direccional
        image_rot = mover_direction;
    }
    if (mover_xscala == true) and (distance &gt; mover_speed) { // volteador
        if (mover_direction &gt; 90) and (mover_direction &lt; 270) { // lado izquierdo
            xscala = -1
        } else xscala = 1;
    }
    
    if (distance &lt;= mover_speed) {
        mover = false;
        speed = 0;
        alarm[1] = mover_time;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// actualizar startx y starty

if (presionado == true) {
    startx = x;
    starty = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(x,y,"dir:"+string(mover_direction))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mover = false;
alarm[1] = -1
x = startx;
y = starty;
speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
