<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.roomtype = "game"
global.unbloquealavez = false;
global.bloqueestavez = noone;
global.bloquetamano = 64;
global.cuadrotamano = 5;
//global.imagen = sprite11;
global.intentos = 0;
global.tiempo = 0;
global.minutos = 0;
global.horas = 0;
global.imagenes = 0;
global.victoria = false;
global.listo = true;
global.faltantes = 1
imagex = -1
//event_user(0) // asignar posiciones a los bloques
//event_user(1) // asignar imagenes a los bloques

visible = true;

if (not variable_global_exists("imagen")) {
    global.imagen = "img\n1\ariel\1.jpg"
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// tutorial

var piezat = noone;

with(objMemoriaBloque) {
    x = tutx
    y = tuty;
}

with(objMemoriaBloque) {
    if (posicion == "2-1") {
        x = 320;
        y = 320;
        piezat = id;
    }
}

if (piezat != noone) {
    mano_tutorial(piezat.x+48,piezat.y+48,320+48,224+48,2)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CELEBRACION DE LA VICTORIA
efecto_globos()
efecto_mini_confeti()
efecto_mega_confeti()
alarm[0] = 25
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CELEBRAR VICTORIA
if (LAB == 0) juego_ganar()
else show_message("GANASTE!")

if (instance_exists(objManoGuia)) {
    with(objManoGuia) instance_destroy()
}
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Trabajar la Imagen y Asignarla a los Bloques


if (string_count("\", global.imagen) != 0) {
    imagex = sprite_add(global.imagen,1,0,0,0,0)
} else imagex = asset_get_index(global.imagen)

global.imagenes = partir_imagen(imagex,global.cuadrotamano);
// imagen_partida[# cuadro-1, cuadro-1] = 0;
// asignacion de la ultima imagen

with(objBloqueInvisble) {
    sprite_index = other.imagex;
    var ws = sprite_get_width(sprite_index)/(global.bloquetamano*global.cuadrotamano);
    var hs = sprite_get_height(sprite_index)/(global.bloquetamano*global.cuadrotamano);
    image_xscale = 1/ws;
    image_yscale = 1/hs;
}
   
global.imagenes[# global.cuadrotamano-1, global.cuadrotamano-1] = 0;

//var global.imagenes = global.imagenes;
//var contador = 0;
for(var i = 0; i &lt; global.cuadrotamano; i++) {
    for(var j = 0; j &lt; global.cuadrotamano; j++) {
        var posicion = string(i)+"-"+string(j);
        var imagen = ds_grid_get(global.imagenes,i,j);//global.imagenes[# i,j];//ds_grid_get(global.imagenes,i,j);//ds_list_find_value(imagen_en_partes,contador);//ds_map_find_value(imagen_en_partes,posicion);
        
        asignar_sprite(posicion,imagen,global.bloquetamano);
        //image_index = imagen;
        asignar_adyacencias(posicion,global.imagenes[# i,j-1], global.imagenes[# i,j+1],global.imagenes[# i+1,j], global.imagenes[# i-1,j])
        //contador++;
    }
}

for(var i = 0; i &lt; global.cuadrotamano; i++) {
    for(var j = 0; j &lt; global.cuadrotamano; j++) {
        var posicion = string(i)+"-"+string(j);
        //var imagen = ds_grid_get(global.imagenes,i,j);//global.imagenes[# i,j];//ds_grid_get(global.imagenes,i,j);//ds_list_find_value(imagen_en_partes,contador);//ds_map_find_value(imagen_en_partes,posicion);
        
        //asignar_sprite(posicion,imagen,global.bloquetamano);
        //image_index = imagen;
        //asignar_adyacencias(posicion,global.imagenes[# i,j-1], global.imagenes[# i,j+1],global.imagenes[# i+1,j], global.imagenes[# i-1,j])
        //contador++;
        asignar_o_adyacencias(posicion)
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// asignar posiciones a los bloques

for(var i = 0; i &lt; global.cuadrotamano; i++) {
    for(var j = 0; j &lt; global.cuadrotamano; j++) {
        var newposicion = string(i)+"-"+string(j);
        asignar_posicion(newposicion);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_delete(imagex)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_font(font0)
//draw_set_color(c_red)
//draw_text(x,y,"Intentos: "+string(global.intentos)+" #Tiempo:"+string(floor(global.tiempo/30))+"segs")
if (!global.victoria) {
    global.tiempo++;
    if (floor( global.tiempo / 30 ) == 60) {
        global.tiempo = 0;
        global.minutos++;
        if (global.minutos == 60) {
            global.minutos = 0;
            global.horas++;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
