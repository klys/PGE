<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPCIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>background_text = "Noone"
background_sprite = -1
n = 0
// async dialogs
menui_async = -1
back_async = -1
text_async = -1

//settings
global.show_help = true;
global.text_color = c_black // text
global.gridh = 32
global.gridw = 32
global.grid_color = c_red
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (async_load[? "id"] == menui_async) {
    if (async_load[? "status"] == true) {
        if (async_load[? "result"] != "") {
            var file = async_load[? "result"]+".ppmap";
            if (file_exists(file) == false) {
                show_message("ERROR: Archivo no existe (0x0)")
                exit;
            }
                var ofile = file_text_open_read(file);
            if (ofile == -1) {
                show_message("ERROR: Archivo no existe (0x1)")        
                exit;
            }
                
                var json = file_text_read_string(ofile);
                var map = json_decode(json);
                
                if (map == -1) {
                    show_message("ERROR: JSON no legible (1x0)")
                    file_text_close(ofile)
                    exit;
                }
                
                var sprite = map[? "icono"];
                
                var asset = asset_get_index(sprite);
                
                if (asset &lt; 0) {
                    show_message("ERROR: Icono del Mapa no seleccionado (2x0)")
                    file_text_close(ofile)
                    exit;
                }
                
                if (asset_get_type(sprite) != asset_sprite) {
                    show_message("ERROR FATAL: Icono del Mapa no es SPRITE (2x1)")
                    file_text_close(ofile)
                    exit;
                }
                
                var nobj = instance_create(mouse_x, mouse_y, objJSON_IconNivel);
                nobj.sprite_index = asset;
                nobj.ppmap = file;
                file_text_close(ofile)
                
            
        }
    }
    menui_async = -1
} else 
if (back_async == async_load[? "id"]) {
    if (async_load[? "status"] == true) {
        if (async_load[? "result"] != "") {
        
            if (string_count("\",async_load[? "result"]) != 0) {
                //var fname = get_open_filename_ext("Imagen PNG|*.png|Imagen JPG|*.jpg", "", working_directory, "Abrir Imagen");//async_load[? "result"]
                var fname = async_load[? "result"];
                show_debug_message(fname)
                if (fname == "") exit;
                background_sprite = sprite_add(fname,1,false,false,0,0);
                background_text = fname;
                exit;
            }     
        
            var asset = asset_get_index(async_load[? "result"]);
            if (asset &lt; 0) {
                show_message("Sprite invalido!")
                exit;
            }
            
            if (asset_get_type(async_load[? "result"]) == asset_sprite) {
                background_sprite = asset;
                background_text = async_load[? "result"]
            }
            
        }
    }
    back_async = -1
} else
if (text_async == async_load[? "id"]) {
    if (async_load[? "status"] == true) {
        if (async_load[? "result"] != "") {
            var nobj = instance_create(mouse_x, mouse_y, objJSON_Text);
            nobj.text = async_load[? "result"];
        }
    }
    text_async = -1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (background_sprite != -1) {
    if (sprite_exists(background_sprite) == true) {
        draw_sprite_size(background_sprite,0,0,0,720,1280,0,c_white,1)
    }
}
if (global.show_help == true) {
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    draw_set_font(fontGameCreator)
    draw_set_color(global.text_color)
    draw_text(64,64,"MENU EDITOR
    F1 --&gt; HELP
    F2 --&gt; New ICON
    F3 --&gt; Set BACKGROUND
    F4 --&gt; Agregar Titulo
    F5 --&gt; Guardar Menu
    F6 --&gt; Cargar Menu")
}
draw_set_color(global.grid_color)
for(var i = global.gridw; i &lt; 720; i+= global.gridw) {
    draw_line(i,0,i,1280)
}

for(var j = global.gridh; j &lt; 1280; j += global.gridh) {
    draw_line(0,j,720,j)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="117">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CARGAR

var file;
 file = get_open_filename_ext("Menu Icon File|*.imf", "", "", "Abrir Menu de Iconos");
 if file != ""
 {
    var json = file_load(file);
 }
 else exit;
 
 if (json == "") {
    show_message("Archivo vacio.")
    exit;
 }
 
 var mainmap = json_decode(json);
 
 if (mainmap == -1) {
    show_message("Archivo corrupto.")
    exit;
 }
 
 var question = show_question("Desea cargar el Menu de Iconos Seleccionado? Se Perder√° todo lo que no haya guardado.");
 
 if (question == false) exit;
 
 with (objObjMovible)instance_destroy ();

 background_text = mainmap[? "background"];
 if (string_count("\",background_text) != 0) 
background_sprite = sprite_add(background_text,1,false,false,0,0);
else background_sprite = asset_get_index(mainmap[? "background"])
 //background_sprite = asset_get_index(background_text);
 
 n = real(mainmap[? "n"]);
 
 for(var i = 0; i &lt; n; i++) {
    var thismap = json_decode(mainmap[? "object-"+string(i)]);
    if (thismap == -1) continue;
    switch (thismap[? "type"]) {
        case "boton":
        var x_per = real(thismap[? "x"]);
        var y_per = real(thismap[? "y"]);
        var nobj = instance_create(720/x_per, 1280/y_per,objJSON_IconNivel);
        nobj.posicionando = false;
        nobj.x_per = x_per;
        nobj.y_per = y_per;
        // boton vars
        nobj.ppmap = thismap[? "ppmap"];
        var json = json_decode(mapa_get(nobj.ppmap));
        nobj.sprite_index = asset_get_index(json[? "icono"])
        nobj.coronas = real(thismap[? "coronas"]);
        // text var
        
        if (is_undefined(thismap[? "text"]) == true) break;
        nobj.text = thismap[? "text"];
        nobj.r = real(thismap[? "r"]);
        nobj.g = real(thismap[? "g"]);
        nobj.b = real(thismap[? "b"]);
        with(nobj) {
            color = make_color_rgb(r,g,b);
            color_text = "custom rgb("+string(r)+", "+string(g)+", "+string(b)+")";
        }
        nobj.font = asset_get_index(thismap[? "font"]);
        nobj.font_text = thismap[? "font"];
        break;
        case "text":
        var x_per = real(thismap[? "x"]);
        var y_per = real(thismap[? "y"]);
        var nobj = instance_create(720/x_per, 1280/y_per,objJSON_Text);
        nobj.posicionando = false;
        nobj.x_per = x_per;
        nobj.y_per = y_per;
        // text vars
        nobj.text = thismap[? "text"];
        nobj.r = real(thismap[? "r"]);
        nobj.g = real(thismap[? "g"]);
        nobj.b = real(thismap[? "b"]);
        with(nobj) {
            color = make_color_rgb(r,g,b);
            color_text = "custom rgb("+string(r)+", "+string(g)+", "+string(b)+")";
        }
        nobj.font = asset_get_index(thismap[? "font"]);
        nobj.font_text = thismap[? "font"];
        break;
    }
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUARDAR

var mainmap = ds_map_create();

mainmap[? "background"] = background_text;

var n = 0;
with(objJSON_IconNivel) {
    var thismap = ds_map_create();
    thismap[? "type"] = "boton";
    thismap[? "x"] = string(x_per);
    thismap[? "y"] = string(y_per);
    thismap[? "ppmap"] = ppmap;
    thismap[? "coronas"] = string(coronas);
    thismap[? "text"] = text;
    thismap[? "r"] = string(r);
    thismap[? "g"] = string(g);
    thismap[? "b"] = string(b);
    thismap[? "font"] = font_text;
    mainmap[? "object-"+string(n)] = json_encode(thismap);
    ds_map_destroy(thismap)
    n++;
}

with(objJSON_Text) {
    var thismap = ds_map_create();
    thismap[? "type"] = "text";
    thismap[? "x"] = string(x_per);
    thismap[? "y"] = string(y_per);
    thismap[? "text"] = text;
    thismap[? "r"] = string(r);
    thismap[? "g"] = string(g);
    thismap[? "b"] = string(b);
    thismap[? "font"] = font_text;
    mainmap[? "object-"+string(n)] = json_encode(thismap);
    ds_map_destroy(thismap)
    n++;
}

mainmap[? "n"] = string(n);

var json = json_encode(mainmap)


var file;
 file = get_save_filename_ext("Icon Menu File|*.imf", "", "", "Guardar Menu de Iconos");
 if file != ""
    {
    file_save(file,json);
    }
    
ds_map_destroy(mainmap)    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text_async = get_string_async("Ingrese el Texto a Mostrar","")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cambiar Background Imagen
back_async = get_string_async("Ingrese un sprite para el Background","")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Nuevo Menu Icon

menui_async = get_string_async("Ingrese una ruta de mapa (ej: maps/Mapa Pocahontas)","");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.show_help = !global.show_help;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Volvar al Menu principal

room = roomGameEditor
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
